/* Generated By:JavaCC: Do not edit this line. Parser.java */
package parser;

import ast.*;
import type.BooleanType;
import type.IType;
import type.IntegerType;
import type.MemoryType;
import util.Triplet;

import java.util.ArrayList;
import java.util.List;

public class Parser implements ParserConstants {

    static final private int[] jj_la1 = new int[15];
    /**
     * Generated Token Manager.
     */
    static public ParserTokenManager token_source;
    /**
     * Current token.
     */
    static public Token token;
    /**
     * Next token.
     */
    static public Token jj_nt;
    static SimpleCharStream jj_input_stream;
    static private boolean jj_initialized_once = false;
    static private int jj_ntk;
    static private int jj_gen;
    static private int[] jj_la1_0;
    static private int[] jj_la1_1;
    static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
    static private int[] jj_expentry;
    static private int jj_kind = -1;

    static {
        jj_la1_init_0();
        jj_la1_init_1();
    }

    /**
     * Constructor with InputStream.
     */
    public Parser(java.io.InputStream stream) {
        this(stream, null);
    }

    /**
     * Constructor with InputStream and supplied encoding
     */
    public Parser(java.io.InputStream stream, String encoding) {
        if (jj_initialized_once) {
            System.out.println("ERROR: Second call to constructor of static parser.  ");
            System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
            System.out.println("       during parser generation.");
            throw new Error();
        }
        jj_initialized_once = true;
        try {
            jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1);
        } catch (java.io.UnsupportedEncodingException e) {
            throw new RuntimeException(e);
        }
        token_source = new ParserTokenManager(jj_input_stream);
        token = new Token();
        jj_ntk = -1;
        jj_gen = 0;
        for (int i = 0; i < 15; i++) jj_la1[i] = -1;
    }

    /**
     * Constructor.
     */
    public Parser(java.io.Reader stream) {
        if (jj_initialized_once) {
            System.out.println("ERROR: Second call to constructor of static parser. ");
            System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
            System.out.println("       during parser generation.");
            throw new Error();
        }
        jj_initialized_once = true;
        jj_input_stream = new SimpleCharStream(stream, 1, 1);
        token_source = new ParserTokenManager(jj_input_stream);
        token = new Token();
        jj_ntk = -1;
        jj_gen = 0;
        for (int i = 0; i < 15; i++) jj_la1[i] = -1;
    }

    /**
     * Constructor with generated Token Manager.
     */
    public Parser(ParserTokenManager tm) {
        if (jj_initialized_once) {
            System.out.println("ERROR: Second call to constructor of static parser. ");
            System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
            System.out.println("       during parser generation.");
            throw new Error();
        }
        jj_initialized_once = true;
        token_source = tm;
        token = new Token();
        jj_ntk = -1;
        jj_gen = 0;
        for (int i = 0; i < 15; i++) jj_la1[i] = -1;
    }

    static final public ASTNode Start() throws ParseException {
        ASTNode root;
        root = SequenceExpression();
        jj_consume_token(EOL);
        {
            if (true) return root;
        }
        throw new Error("Missing return statement in function");
    }

    static final public ASTNode SequenceExpression() throws ParseException {
        ASTNode expression1;
        ASTNode expression2;

        List<ASTNode> expressions = new ArrayList<ASTNode>();
        expression1 = AssignExpression();
        expressions.add(expression1);
        label_1:
        while (true) {
            switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                case SEMICOL:
                    ;
                    break;
                default:
                    jj_la1[0] = jj_gen;
                    break label_1;
            }
            jj_consume_token(SEMICOL);
            expression2 = AssignExpression();
            expressions.add(expression2);
            expression1 = new ASTSequence(expressions);
        }
        {
            if (true) return expression1;
        }
        throw new Error("Missing return statement in function");
    }

    static final public ASTNode AssignExpression() throws ParseException {
        ASTNode expression1;
        ASTNode expression2;
        expression1 = DisjunctionExpression();
        switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
            case ASSIGN:
                jj_consume_token(ASSIGN);
                expression2 = DisjunctionExpression();
                expression1 = new ASTAssign(expression1, expression2);
                break;
            default:
                jj_la1[1] = jj_gen;
                ;
        }
        {
            if (true) return expression1;
        }
        throw new Error("Missing return statement in function");
    }

    static final public ASTNode DisjunctionExpression() throws ParseException {
        ASTNode expression1;
        ASTNode expression2;
        expression1 = ConjunctionExpression();
        switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
            case OR:
                jj_consume_token(OR);
                expression2 = ConjunctionExpression();
                expression1 = new ASTDisjunction(expression1, expression2);
                break;
            default:
                jj_la1[2] = jj_gen;
                ;
        }
        {
            if (true) return expression1;
        }
        throw new Error("Missing return statement in function");
    }

    static final public ASTNode ConjunctionExpression() throws ParseException {
        ASTNode expression1;
        ASTNode expression2;
        expression1 = EqualityExpression();
        switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
            case AND:
                jj_consume_token(AND);
                expression2 = EqualityExpression();
                expression1 = new ASTConjunction(expression1, expression2);
                break;
            default:
                jj_la1[3] = jj_gen;
                ;
        }
        {
            if (true) return expression1;
        }
        throw new Error("Missing return statement in function");
    }

    static final public ASTNode EqualityExpression() throws ParseException {
        ASTNode expression1;
        ASTNode expression2;
        expression1 = CompareExpression();
        switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
            case EQ:
            case NOTEQ:
                switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                    case EQ:
                        jj_consume_token(EQ);
                        expression2 = CompareExpression();
                        expression1 = new ASTEqual(expression1, expression2);
                        break;
                    case NOTEQ:
                        jj_consume_token(NOTEQ);
                        expression2 = CompareExpression();
                        expression1 = new ASTNotEqual(expression1, expression2);
                        break;
                    default:
                        jj_la1[4] = jj_gen;
                        jj_consume_token(-1);
                        throw new ParseException();
                }
                break;
            default:
                jj_la1[5] = jj_gen;
                ;
        }
        {
            if (true) return expression1;
        }
        throw new Error("Missing return statement in function");
    }

    static final public ASTNode CompareExpression() throws ParseException {
        ASTNode expression1;
        ASTNode expression2;
        expression1 = Expression();
        switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
            case GT:
            case GTE:
            case LT:
            case LTE:
                switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                    case LT:
                        jj_consume_token(LT);
                        expression2 = Expression();
                        expression1 = new ASTLesser(expression1, expression2);
                        break;
                    case GT:
                        jj_consume_token(GT);
                        expression2 = Expression();
                        expression1 = new ASTGreater(expression1, expression2);
                        break;
                    case LTE:
                        jj_consume_token(LTE);
                        expression2 = Expression();
                        expression1 = new ASTLesserEqual(expression1, expression2);
                        break;
                    case GTE:
                        jj_consume_token(GTE);
                        expression2 = Expression();
                        expression1 = new ASTGreaterEqual(expression1, expression2);
                        break;
                    default:
                        jj_la1[6] = jj_gen;
                        jj_consume_token(-1);
                        throw new ParseException();
                }
                break;
            default:
                jj_la1[7] = jj_gen;
                ;
        }
        {
            if (true) return expression1;
        }
        throw new Error("Missing return statement in function");
    }

    static final public ASTNode Expression() throws ParseException {
        ASTNode expression1;
        ASTNode expression2;
        expression1 = Term();
        label_2:
        while (true) {
            switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                case PLUS:
                case MINUS:
                    ;
                    break;
                default:
                    jj_la1[8] = jj_gen;
                    break label_2;
            }
            switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                case PLUS:
                    jj_consume_token(PLUS);
                    expression2 = Term();
                    expression1 = new ASTAddition(expression1, expression2);
                    break;
                case MINUS:
                    jj_consume_token(MINUS);
                    expression2 = Term();
                    expression1 = new ASTSubtraction(expression1, expression2);
                    break;
                default:
                    jj_la1[9] = jj_gen;
                    jj_consume_token(-1);
                    throw new ParseException();
            }
        }
        {
            if (true) return expression1;
        }
        throw new Error("Missing return statement in function");
    }

    static final public ASTNode Term() throws ParseException {
        ASTNode expression1;
        ASTNode expression2;
        expression1 = Factor();
        label_3:
        while (true) {
            switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                case TIMES:
                case DIV:
                    ;
                    break;
                default:
                    jj_la1[10] = jj_gen;
                    break label_3;
            }
            switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                case TIMES:
                    jj_consume_token(TIMES);
                    expression2 = Factor();
                    expression1 = new ASTMultiplication(expression1, expression2);
                    break;
                case DIV:
                    jj_consume_token(DIV);
                    expression2 = Factor();
                    expression1 = new ASTDivision(expression1, expression2);
                    break;
                default:
                    jj_la1[11] = jj_gen;
                    jj_consume_token(-1);
                    throw new ParseException();
            }
        }
        {
            if (true) return expression1;
        }
        throw new Error("Missing return statement in function");
    }

    static final public ASTNode Factor() throws ParseException {
        Token token;
        ASTNode expression;
        switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
            case NUM:
                token = jj_consume_token(NUM);
            {
                if (true) return new ASTInteger(Integer.parseInt(token.image));
            }
            break;
            case ID:
                token = jj_consume_token(ID);
            {
                if (true) return new ASTIdentifier(token.image);
            }
            break;
            case TRUE:
                token = jj_consume_token(TRUE);
            {
                if (true) return new ASTBoolean(Boolean.parseBoolean(token.image));
            }
            break;
            case FALSE:
                token = jj_consume_token(FALSE);
            {
                if (true) return new ASTBoolean(Boolean.parseBoolean(token.image));
            }
            break;
            case MINUS:
                jj_consume_token(MINUS);
                expression = Factor();
            {
                if (true) return new ASTReverse(expression);
            }
            break;
            case NOT:
                jj_consume_token(NOT);
                expression = Factor();
            {
                if (true) return new ASTNegation(expression);
            }
            break;
            case DECL:
                jj_consume_token(DECL);
                expression = Declaration();
            {
                if (true) return expression;
            }
            break;
            case LPAR:
                jj_consume_token(LPAR);
                expression = SequenceExpression();
                jj_consume_token(RPAR);
            {
                if (true) return expression;
            }
            break;
            case NEW:
                jj_consume_token(NEW);
                expression = Factor();
            {
                if (true) return new ASTReference(expression);
            }
            break;
            case DEREF:
                jj_consume_token(DEREF);
                expression = Factor();
            {
                if (true) return new ASTDereference(expression);
            }
            break;
            case IF:
                jj_consume_token(IF);
                expression = Condition();
            {
                if (true) return expression;
            }
            break;
            case WHILE:
                jj_consume_token(WHILE);
                expression = Loop();
            {
                if (true) return expression;
            }
            break;
            default:
                jj_la1[12] = jj_gen;
                jj_consume_token(-1);
                throw new ParseException();
        }
        throw new Error("Missing return statement in function");
    }

    static final public IType TypeExpression() throws ParseException {
        IType type;
        IType referenceType;
        switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
            case INT:
                jj_consume_token(INT);
                type = IntegerType.getType();
                break;
            case BOOL:
                jj_consume_token(BOOL);
                type = BooleanType.getType();
                break;
            case REF:
                jj_consume_token(REF);
                referenceType = TypeExpression();
                type = new MemoryType(referenceType);
                break;
            default:
                jj_la1[13] = jj_gen;
                jj_consume_token(-1);
                throw new ParseException();
        }
        {
            if (true) return type;
        }
        throw new Error("Missing return statement in function");
    }

    static final public ASTNode Declaration() throws ParseException {
        Token parameter;
        IType type;
        ASTNode value;

        List<Triplet<String, IType, ASTNode>> definitions = new ArrayList<Triplet<String, IType, ASTNode>>();
        ASTNode bodyExpression;
        label_4:
        while (true) {
            parameter = jj_consume_token(ID);
            jj_consume_token(COL);
            type = TypeExpression();
            jj_consume_token(DEF);
            value = SequenceExpression();
            definitions.add(new Triplet<String, IType, ASTNode>(parameter.image, type, value));
            switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                case ID:
                    ;
                    break;
                default:
                    jj_la1[14] = jj_gen;
                    break label_4;
            }
        }
        jj_consume_token(IN);
        bodyExpression = SequenceExpression();
        jj_consume_token(END);
        {
            if (true) return new ASTDeclaration(definitions, bodyExpression);
        }
        throw new Error("Missing return statement in function");
    }

    static final public ASTNode Condition() throws ParseException {
        ASTNode conditionExpression;
        ASTNode mainExpression;
        ASTNode secondaryExpression;
        conditionExpression = SequenceExpression();
        jj_consume_token(THEN);
        mainExpression = SequenceExpression();
        jj_consume_token(ELSE);
        secondaryExpression = SequenceExpression();
        jj_consume_token(END);
        {
            if (true) return new ASTCondition(conditionExpression, mainExpression, secondaryExpression);
        }
        throw new Error("Missing return statement in function");
    }

    static final public ASTNode Loop() throws ParseException {
        ASTNode conditionExpression;
        ASTNode bodyExpression;
        conditionExpression = SequenceExpression();
        jj_consume_token(DO);
        bodyExpression = SequenceExpression();
        jj_consume_token(END);
        {
            if (true) return new ASTWhile(conditionExpression, bodyExpression);
        }
        throw new Error("Missing return statement in function");
    }

    private static void jj_la1_init_0() {
        jj_la1_0 = new int[]{0x1000, 0x8000000, 0x80000000, 0x0, 0x60000000, 0x60000000, 0x3c00000, 0x3c00000, 0x0, 0x0, 0x0, 0x0, 0x4340e00, 0x1c0, 0x0,};
    }

    private static void jj_la1_init_1() {
        jj_la1_1 = new int[]{0x0, 0x0, 0x0, 0x1, 0x0, 0x0, 0x0, 0x0, 0x60, 0x60, 0x180, 0x180, 0x1a42, 0x0, 0x1000,};
    }

    /**
     * Reinitialise.
     */
    static public void ReInit(java.io.InputStream stream) {
        ReInit(stream, null);
    }

    /**
     * Reinitialise.
     */
    static public void ReInit(java.io.InputStream stream, String encoding) {
        try {
            jj_input_stream.ReInit(stream, encoding, 1, 1);
        } catch (java.io.UnsupportedEncodingException e) {
            throw new RuntimeException(e);
        }
        token_source.ReInit(jj_input_stream);
        token = new Token();
        jj_ntk = -1;
        jj_gen = 0;
        for (int i = 0; i < 15; i++) jj_la1[i] = -1;
    }

    /**
     * Reinitialise.
     */
    static public void ReInit(java.io.Reader stream) {
        jj_input_stream.ReInit(stream, 1, 1);
        token_source.ReInit(jj_input_stream);
        token = new Token();
        jj_ntk = -1;
        jj_gen = 0;
        for (int i = 0; i < 15; i++) jj_la1[i] = -1;
    }

    static private Token jj_consume_token(int kind) throws ParseException {
        Token oldToken;
        if ((oldToken = token).next != null) token = token.next;
        else token = token.next = token_source.getNextToken();
        jj_ntk = -1;
        if (token.kind == kind) {
            jj_gen++;
            return token;
        }
        token = oldToken;
        jj_kind = kind;
        throw generateParseException();
    }

    /**
     * Get the next Token.
     */
    static final public Token getNextToken() {
        if (token.next != null) token = token.next;
        else token = token.next = token_source.getNextToken();
        jj_ntk = -1;
        jj_gen++;
        return token;
    }

    /**
     * Get the specific Token.
     */
    static final public Token getToken(int index) {
        Token t = token;
        for (int i = 0; i < index; i++) {
            if (t.next != null) t = t.next;
            else t = t.next = token_source.getNextToken();
        }
        return t;
    }

    static private int jj_ntk() {
        if ((jj_nt = token.next) == null)
            return (jj_ntk = (token.next = token_source.getNextToken()).kind);
        else
            return (jj_ntk = jj_nt.kind);
    }

    /**
     * Generate ParseException.
     */
    static public ParseException generateParseException() {
        jj_expentries.clear();
        boolean[] la1tokens = new boolean[46];
        if (jj_kind >= 0) {
            la1tokens[jj_kind] = true;
            jj_kind = -1;
        }
        for (int i = 0; i < 15; i++) {
            if (jj_la1[i] == jj_gen) {
                for (int j = 0; j < 32; j++) {
                    if ((jj_la1_0[i] & (1 << j)) != 0) {
                        la1tokens[j] = true;
                    }
                    if ((jj_la1_1[i] & (1 << j)) != 0) {
                        la1tokens[32 + j] = true;
                    }
                }
            }
        }
        for (int i = 0; i < 46; i++) {
            if (la1tokens[i]) {
                jj_expentry = new int[1];
                jj_expentry[0] = i;
                jj_expentries.add(jj_expentry);
            }
        }
        int[][] exptokseq = new int[jj_expentries.size()][];
        for (int i = 0; i < jj_expentries.size(); i++) {
            exptokseq[i] = jj_expentries.get(i);
        }
        return new ParseException(token, exptokseq, tokenImage);
    }

    /**
     * Enable tracing.
     */
    static final public void enable_tracing() {
    }

    /**
     * Disable tracing.
     */
    static final public void disable_tracing() {
    }

    /**
     * Reinitialise.
     */
    public void ReInit(ParserTokenManager tm) {
        token_source = tm;
        token = new Token();
        jj_ntk = -1;
        jj_gen = 0;
        for (int i = 0; i < 15; i++) jj_la1[i] = -1;
    }

}
